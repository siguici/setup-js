name: Setup JavaScript/TypeScript Environment

branding:
  icon: settings
  color: yellow

description: |
  This action sets up the runtime, installs dependencies, and runs scripts for Node.js, Deno, or Bun.

inputs:
  runtime:
    description: 'The runtime to use (node, deno, or bun)'
    required: false
    default: node
  version:
    description: 'The version of the runtime'
    required: false
    default: latest
  pm:
    description: 'Package manager to use (npm, yarn, pnpm)'
    required: false
  scripts:
    description: 'A comma-separated list of scripts to run in order (e.g., lint, build, test)'
    required: false
  cwd:
    description: 'Current working directory for commands'
    required: false
    default: '.'

outputs:
  pm:
    description: 'Detected package manager'
    value: ''
  pm_version:
    description: 'Version of the package manager'
    value: ''
  pm_lockfile:
    description: 'Detected lockfile'
    value: ''

runs:
  using: 'composite'
  steps:
    - name: 🚚 Checkout repository
      uses: actions/checkout@v4

    - name: 🔍 Detect package manager
      id: detect-pm
      working-directory: ${{ inputs.cwd }}
      run: |
        chmod +x "${{ github.action_path }}/scripts/pm.sh"
        bash "${{ github.action_path }}/scripts/pm.sh"
      env:
        input_pm: ${{ inputs.pm }}
        runtime: ${{ inputs.runtime }}
        GITHUB_ENV: $GITHUB_ENV
      shell: bash

    - name: 📋 Display detected values
      run: |
        echo "Package Manager: ${{ env.pm }}"
        echo "Version: ${{ env.pm_version }}"
        echo "Lockfile: ${{ env.pm_lockfile }}"
      shell: bash

    - name: 🐳 Set up Node.js
      if: ${{ inputs.runtime == 'node' }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.version }}

    - name: 🦕 Set up Deno
      if: ${{ inputs.runtime == 'deno' || env.pm == 'deno' }}
      uses: denoland/setup-deno@v2
      with:
        deno-version: ${{ inputs.version }}

    - name: 🦄 Set up Bun
      if: ${{ inputs.runtime == 'bun' || env.pm == 'bun' }}
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ inputs.version }}

    - name: 📦 Install dependencies
      working-directory: ${{ inputs.cwd }}
      run: |
        if [[ "${{ inputs.runtime }}" == "node" ]]; then
          echo "⚙️ Installing ${{ env.pm }} dependencies"
          corepack enable
          if [[ "${{ env.pm }}" == "yarn" ]]; then
            echo "ℹ️ Yarn detected, preparing package.json..."
            if [[ "${{ env.pm_version }}" == "latest" ]]; then
              pm_version=$(yarn --version)
            else
              pm_version=${{ env.pm_version }}
            fi
            echo "ℹ️ Defining the 'packageManager' field to 'yarn@$pm_version'..."
            jq ".packageManager = \"yarn@$pm_version\"" package.json > yarn-package.json
            mv package.json main-package.json
            mv yarn-package.json package.json
          fi
          corepack prepare ${{ env.pm }}@${{ env.pm_version }} --activate
          if [[ "${{ env.pm }}" == "npm" ]]; then
            npm install --legacy-peer-deps
          else
            ${{ env.pm }} install
          fi
        else
          ${{ env.pm }} install
        fi
      shell: bash

    - name: 🔨 Execute scripts
      if: ${{ inputs.scripts }}
      working-directory: ${{ inputs.cwd }}
      run: |
        chmod +x "${{ github.action_path }}/scripts/run.sh"
        bash "${{ github.action_path }}/scripts/run.sh"
      shell: bash
      env:
        scripts: ${{ inputs.scripts }}
        pm: ${{ env.pm }}

    - name: 🎉 Finish test workflow
      run: echo "🎯 Tests completed for ${{ inputs.runtime }} ${{ inputs.version }}!"
      shell: bash
